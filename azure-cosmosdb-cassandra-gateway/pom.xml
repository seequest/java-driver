<!--

    Copyright DataStax, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <!--
    <parent>
      <groupId>com.datastax.cassandra</groupId>
      <artifactId>cassandra-driver-parent</artifactId>
      <version>3.7.2-SNAPSHOT</version>
    </parent>
  -->

  <name>Microsoft Azure Cosmos DB Gateway for Apache Cassandra</name>
  <groupId>com.microsoft.azure.cosmosdb</groupId>
  <artifactId>azure-cosmosdb-cassandra-gateway</artifactId>
  <version>3.7.2-SNAPSHOT</version>
  
  <description>
    A Cosmos DB Driver Extension for Apache Cassandra 1.2+ that works exclusively with the Cassandra Query Language
    version 3 (CQL3) and Cassandra's binary protocol.
  </description>

  <profiles>
    <profile>
      <id>modern-jdks</id>
      <activation>
        <jdk>[1.8,)</jdk>
      </activation>
      <properties>
        <javadoc.opts>-Xdoclint:none</javadoc.opts>
      </properties>
      <build>
        <plugins>
          <!-- only activate for jdk8+ since requires java 8 -->
          <plugin>
            <groupId>com.coveo</groupId>
            <artifactId>fmt-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>check-format</id>
                <phase>initialize</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <properties>

    <!-- Project build and reporting options -->

    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <test.osgi.skip>true</test.osgi.skip>
    <test.groups>unit</test.groups>
    <java.version>1.8</java.version>
    <javadoc.opts/>

    <!-- Project dependency version info -->

    <assertj.version>1.7.0</assertj.version>
    <cassandra.version>3.11.2</cassandra.version>
    <felix.version>4.4.1</felix.version>
    <guava.version>19.0</guava.version>
    <log4j.version>1.2.17</log4j.version>
    <mockito.version>1.10.19</mockito.version>
    <netty.version>4.1.34.Final</netty.version>
    <slf4j.version>1.7.26</slf4j.version>
    <testng.version>6.14.3</testng.version>

  </properties>

  <dependencies>

    <!-- Product dependencies -->

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>

    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-all</artifactId>
      <version>${netty.version}</version>
    </dependency>

    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>${log4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <!-- Test dependencies -->

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testng</groupId>
      <version>${testng.version}</version>
      <artifactId>testng</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>

      <!-- Compiler configuration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>8</source>
          <target>8</target>
        </configuration>
      </plugin>

      <!-- Application assembly -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <version>2.0.0</version>
        <executions>
          <execution>
            <id>assemble-service</id>
            <phase>package</phase>
            <goals>
              <goal>assemble</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <assembleDirectory>${project.build.directory}/azure-cosmosdb-cassandra-gateway</assembleDirectory>
          <logsDirectory>var/log</logsDirectory>
          <repositoryName>lib</repositoryName>
          <repositoryLayout>flat</repositoryLayout>
          <useWildcardClassPath>true</useWildcardClassPath>
          <programs>
            <program>
              <mainClass>com.microsoft.azure.cosmosdb.cassandra.GatewayProxyHost</mainClass>
              <id>azure-cosmosdb-cassandra-gateway</id>
            </program>
          </programs>
        </configuration>
      </plugin>

      <!-- Application package -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>package-service-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <descriptors>
            <descriptor>src/assembly.xml</descriptor>
          </descriptors>
        </configuration>
      </plugin>

      <!-- Jar (the standard one) -->
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
          </archive>
        </configuration>
      </plugin>

      <!-- Shaded Jar -->
      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <shadedArtifactAttached>true</shadedArtifactAttached>
          <artifactSet>
            <includes>
              <include>io.netty:*</include>
            </includes>
            <excludes>
              <exclude>io.netty:netty-transport-native-epoll</exclude>
            </excludes>
          </artifactSet>
          <relocations>
            <relocation>
              <pattern>io.netty</pattern>
              <shadedPattern>com.datastax.shaded.netty</shadedPattern>
            </relocation>
          </relocations>
          <transformers>
            <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
              <resources>
                <resource>META-INF/MANIFEST.MF</resource>
                <resource>META-INF/io.netty.versions.properties</resource>
                <resource>META-INF/maven/io.netty/netty-buffer/pom.properties</resource>
                <resource>META-INF/maven/io.netty/netty-buffer/pom.xml</resource>
                <resource>META-INF/maven/io.netty/netty-codec/pom.properties</resource>
                <resource>META-INF/maven/io.netty/netty-codec/pom.xml</resource>
                <resource>META-INF/maven/io.netty/netty-common/pom.properties</resource>
                <resource>META-INF/maven/io.netty/netty-common/pom.xml</resource>
                <resource>META-INF/maven/io.netty/netty-handler/pom.properties</resource>
                <resource>META-INF/maven/io.netty/netty-handler/pom.xml</resource>
                <resource>META-INF/maven/io.netty/netty-transport/pom.properties</resource>
                <resource>META-INF/maven/io.netty/netty-transport/pom.xml</resource>
              </resources>
            </transformer>
            <!-- Pick up the alternate manifest that was generated by the alternate execution of the bundle plugin -->
            <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
              <resource>META-INF/MANIFEST.MF</resource>
              <file>${project.build.directory}/META-INF-shaded/MANIFEST.MF</file>
            </transformer>
          </transformers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Sources Jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-test-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Manifests (for standard + shaded jars) -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <executions>
          <!-- Default execution -->
          <execution>
            <id>bundle-manifest</id>
            <phase>process-classes</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
            <configuration>
              <manifestLocation>${project.build.outputDirectory}/META-INF</manifestLocation>
              <instructions>
                <!-- JNR does not provide OSGi bundles, so exclude it; the driver can live without it -->
                <Import-Package>
                  <![CDATA[com.google.common.*;version="16.0.1",!jnr.*,io.netty.channel.epoll,*]]></Import-Package>
              </instructions>
            </configuration>
          </execution>
          <!-- Alternate execution to generate the shaded JAR's manifest -->
          <execution>
            <id>bundle-manifest-shaded</id>
            <phase>process-classes</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
            <configuration>
              <manifestLocation>${project.build.directory}/META-INF-shaded</manifestLocation>
              <instructions>
                <!--
                JNR does not provide OSGi bundles, so exclude it; the driver can live without it
                Explicitly import javax.security.cert because it's required by Netty, but Netty has been explicitly excluded
                -->
                <Import-Package>
                  <![CDATA[com.google.common.*;version="16.0.1",!jnr.*,!io.netty.*,javax.security.cert,*]]></Import-Package>
                <Private-Package>com.datastax.shaded.*</Private-Package>
              </instructions>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <instructions>
            <Bundle-SymbolicName>com.microsoft.azure.cosmosdb.cassandra</Bundle-SymbolicName>
            <Main-Class>com.microsoft.azure.cosmosdb.cassandra.GatewayProxyHost</Main-Class>
          </instructions>
          <!--
          Prevent customized manifest entries from the project's maven-jar-plugin configuration from being read, see
          http://apache-felix.18485.x6.nabble.com/how-lt-manifestLocation-gt-is-used-in-maven-bundle-plugin-td4835566.html
          -->
          <archive>
            <forced>true</forced>
          </archive>
        </configuration>
      </plugin>

    </plugins>

  </build>

</project>

