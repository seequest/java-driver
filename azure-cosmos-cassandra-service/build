#!/usr/bin/env bash

set -o errexit -o nounset

###########
# Variables
###########

declare -r product=azure-cosmos-cassandra-service
declare -r version=2.2.0-prototype
declare -r framework=netcoreapp2.2

declare -r script_root="$(cd "$(dirname "$0")" && pwd)"
declare -r script_name="$(basename "$0")"

###########
# Functions
###########

function usage {
    man "${script_name}"
    exit 0
}

function error {
    echo "${script_name} error: $2" 1>&2
    exit $1
}

function note {
    if [[ -z "${1:-}" ]]; then
        echo "" 1>&2
    else
        echo "[$(date --iso-8601=seconds)] ${script_name} note: $1" 1>&2
    fi
}

###########
# Arguments
###########

declare -r args=$(getopt --name "$script_name" --options "h" --longoptions "help,architecture:,configuration:,operating-system" -- "$@" || echo exit)
eval set -- "$args"

while [[ $1 != '--' ]]; do
    case $1 in
    -h|--help)
        usage; # does not return
        shift 1
        ;;
    --architecture)
        declare -r architecture="$2"
        shift 2
        ;;
    --configuration)
        declare -r configuration="$2"
        shift 2
        ;;
    --operating-system)
        declare -ra operating_systems=( $2 )
        shift 2
        ;;
  esac
done

[[ ! -z ${operating_systems:-} ]] || declare -ra operating_systems=( linux osx win )
[[ ! -z ${configuration:-} ]] || declare -r configuration=Debug
[[ ! -z ${architecture:-} ]] || declare -r architecture=x64

if [[ ${configuration,,} == "debug" ]]; then
    declare -r package_suffix=".debug"
else
    declare -r package_suffix=""
fi

for operating_system in ${operating_systems[@]}; do
    
    runtime="$operating_system-$architecture"
    output="target/$configuration/$framework/$runtime"
    archive="target/$product-$version.$runtime${package_suffix:-}.tar.gz"
    
    note
    note "=> Publishing $configuration $framework for $runtime to $output"
    dotnet publish --configuration ${configuration} --framework ${framework} --runtime ${runtime} --self-contained --output ${output}

    note
    note "=> Packaging $output as $archive"
    tar --transform "s/./$product-$version\\/lib/" --verbose -czf ${archive} -C ${output} ./
done
